ServletContext
1. 서블릿들간의 communication - setAttribute( )
							getAttribute( )

2. Container 차원의 초기화. - 	getInitParameter( )
			      			getInitParameterNames( )

	===== 1. 서블릿들간의 communication. =====


WritingServlet은 요청을 받아서 맵에 저장.

		context.html --> WritingServlet ----> ServletContext				|
											   (Writing 함.)					|
																			|
context.html --> ReadingServlet ----> ServletContext ---->context.html		|
	   (요청)           (Reading 함.)	     (응답)								|
																			|
																			|
								       								Container|
---------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------
	
	-----	Front Controllor의 역할	-----

1. 폼에 입력된 값 받아서.	(id, password)		(1) <Client와 연결>
2. Dao method 호출.		login(id, password);	(2)~(5) <Database와 연결>

context.html --> VO --> Database --> DB --> Database --> VO --> ServletContext

3. ServletContext에 Binding(VO)		(6) 
4. 페이지 연결 --> ReadingServlet	(7) <View, jsp와 연결>

---------------------------------------------------------------------------------------------------------------------


엥커태그는 웹브라우저 갔다가 요청와서 다시 갔다가 왔다.
하지만 오늘 배울꺼는 한번에 간다?


	
	===== 2. Container 차원의 초기화. =====

getInit이 붙은건 Client 폼으로 못가져 온다. D.D(Container)로 가져온다/

D.D에는 <Servlet>
	   <s-n>
	   <s-c>
	   <init-param>
		<p-n>
		<p-v>
	   </init-param>
	   <load-on-startup>
	 </servlet>

servlet context 초기화 구조 가 위에꺼


<init-param>~~</init-param> 까지는 config / getInitparameter()		parameter를 초기화 하는데 누굴해? servlet을 해!

<web-app 는 Contextpass 다!

그래서 쌤은 <web-app 이거 바로 밑에다가 작성한다.

<web-app>	 70번라인부터 73라인까지는 반복된다.
  <context-param>
	<param-name>	(path)
	<param-value>	(c:\\data\\)
  </context-param>

 String path = getServletContext().getInitParameter("path");
여기서 path가 <param-value> 이거이다.



servlet의 Global한 초기화는 각각의 초기화 보다 먼저 진행된다.
먼저 진행된다는건 init() 이전에 초기화가 된다는 것이다.

init()보다 먼저 호출 되는걸 찾자! --> 현재까지 우리가 알고있는거에선 없음!
글로벌한 초기화에서 다른게 쓰인다 그게 뭐? -> 이벤트와 리스너 이다. 이벤트가 발생하면 감지한다. 이 메카니즘을 사용하자.

WAS가 가동되자마자 가장 먼저 만들어 지는것 -> ServletContext
ServletContext의 기능을 이용해 DD에 설정된 값을 끌어오겠다.
------------------------------------------------------------
DD
<context-param>
	<p-n> 별
	<p-v> ☆
</context-param>
------------------------------------------------------------
여기서 ☆ 이걸 가져 올라면 getInitParameter("별"); 이럼 된다.
근데 이걸 어디서 진행해야 하고 어디서 진행하면 안될까?	
<context-param>
	<p-n> 별
	<p-v> ☆
</context-param>
이 자체가 이벤트이다! 그래서 이름이 ServletContext 이벤트이다.
그래서 위에 감지하는 감시자를 부착하자. -> ServletContextListener
근데 이 리스너를 어디다가 부착할까? 이벤트 자체가 DD 니까 리스너도 DD에 부착하면 된다.
진정한 초기화는 반드시 리스너기능이 있어야 한다.
------------------------------------------------------------
DD
<context-param>
	<p-n> 별
	<p-v> ☆
</context-param>
<listener>
	<listener-class>	리스너 클래스 FQCN을 달아 놓는다.
</listener>
------------------------------------------------------------
내가
------------------------------------------------------------
DD
<context-param>
	<p-n> 별
	<p-v> ☆
</context-param>
<listener>
	<listener-class>
</listener>
------------------------------------------------------------
이걸 하는동안 감시자는 돌아간다.
ContextInitialized보다 먼저 호출되는건 아무것도 없다.
어느정도냐면 WAS를 키자마자 호출된다.

-------------------------------------------------------------



ServletContextCafe2


* enterance.html
   Name:
   Age:
     가입
19세 이상만 가입 이하는 가입 안되게


* 서블릿<EnteranceServlet> 역할
폼에 입력된 값 얻어서 vo에 넣고 


* 그 다음 서블릿<ViewServlet>(->jsp)은 바인딩 된걸 가져옴
